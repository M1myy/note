An opportunistic link between two mobile devices or nodes can be constructed when they are within each other's communication. Typically, cyber-physical environments consist of a number of mobile devices that are potentially able to establish opportunistic contacts and serve mobile applications in a cost-effective way. Opportunistic mobile service computing is a promising paradigm capable of utilizing the pervasive mobile computational resources around users. Mobile users are thus allowed to exploit nearby mobile services to boost their computing power without investment into their own resource pool. Never- theless, various challenges, especially its quality-of-service (QoS) and reliability-aware scheduling, are yet to be addressed. Existing studies and related scheduling strategies consider mobile users to be fully stable and available. In this paper, instead, we propose a framework, named a mobile service opportunistic network, and a reliability-aware and deadline-constrained scheduling algorithm for service composition. We then formulate the problem into an optimization problem and propose a Krill-Herd-based algorithm to solve it. Finally, we carry out a case study based on some well- known mobile service composition templates and a real-world dataset. The comparison suggest that our proposed approach outperforms traditional approaches, especially those considering stable and fully available mobile services in their models and algorithms.

Recent years have seen the rocketing development of mobile devices (e.g., smart phones, tablet computers, wearable devices, etc.) and mobile communication. Mobile devices are changing the way people getting the information and their daily lives. These devices allow them to enjoy multiple ways of communicating almost anywhere at anytime [1].
The number of mobile devices is rapidly growing and it has already surpassed the number of stationary Internet hosts.
Mobile applications and services are also developed and provided at a phenomenal rate, while, the requirements from mobile users are becoming more demanding, i.e., more com- plex applications are required to run on mobile devices such as virtual reality applications [2] or machine learning applications [3] on mobile phones. However, because of the finiteness of hardware resource of mobile devices (e.g., computational resource, battery life, memory, and storage), these resource- intensive tasks are usually offloaded to mobile computing cloud [4], which result in high data transfer cost (energy cost and communication fee) and high latency.
Opportunistic computing is a promising complementary to traditional mobile cloud computing. As illustrated in Fig. 1, the core idea of opportunistic computing is sharing. In this paradigm, mobile users are allow to utilize resources and service shared by other users nearby, by exploiting direct physical contacts among users. These available resources and services can be shared directly among users in an elastic and on-demand way without time-consuming and energy-requiring interactions with pre-existing infrastructure, for example, cel- lular networks in networking level, and mobile computing cloud in computing/service level. Note that, mobile tasks usually require huge computational resources or data transfer (e.g., TensorFlow on mobile, Video editor on mobile and Online video). Nearby mobile service provider are thus more adept, in terms of energy-efficiency, at executing these tasks than the online services or nodes with the help of device to device (D2D) communications such as Bluetooth, Wi-Fi and NFC [5]. D2D communications are featured with extensively- reduced data transfer delays and required energy than the traditional cellular network. Thus it provides better user- perceived service quality in terms of reduced waiting time and improved service responsiveness. It is widely believed to have potential to replenish traditional cellular communications by providing increased user throughput, reduced cellular traffic, and extened network coverage.
However, due to the completely different application pat- terns and which differs from traditional service computing, service computing in mobile environment faces two inherent challenges.
1) Unguaranteed reliability: Mobile users may change their locations very frequently in a mobile environment and thus service availability tends to be fluctuating and time-varying. It is therefore difficult to guarantee high reliability of service composition when their underlying mobile services are of time-varying availability. However, most existing studies con- siders fully-available services of constant connectivity in mobile environment when designing service composition models and algorithms. It is therefore clear to see that such models and algorithms could lead to low reliability of resulting composite services when applied to real-world mobile applications.
2) Neglect of deadline constrain: Real-world mobile ap- plications could well be time-critical and thus composite services are usually supposed to accomplish required tasks within certain stipulated deadlines. However, most existing studies for mobile service composition consider response-time minimization as the major optimization objective and deadline constraints are rarely taken into account.
To address the above-described challenges and concerns, in this work, we propose a new approach for service selections and compositions in mobile environments. , we propose a reliability-aware and deadline-constrained mobile service com- position approach, where mobile users in a mobile service opportunistic network are allowed to combine and exploit, through D2D communications, nearby devicesâ€™ resources. In- stead of assuming fully available mobile services, we con- sider time-varying availability of services due to their run- time mobility and develop reliability-aware deadline/reliability estimation models for service compositions. Based on the estimation model, we present a Krill-Herd-based algorithm to decide optimal composition schedules at run-time aiming at maximized reliability with guaranteed deadline. To validate our proposed approach, we carry out a case study based on some well-known mobile service composition templates and a real-world dataset (the D2D contact traces of MIT Reality dataset and the response time data of the QWS dataset).

Opportunistic networking is one of the most promising evolutions of the traditional multi-hop one. Instead of relying itself on stable end-to-end paths through Internet, opportunistic networks do not regard node mobility as a problem but useful opportunity. Extensive efforts have been made into this direction. For example, Marco et al. [6] give a review of opportunistic networks and regard it as the first step in people-centric networking. They also discuss challenges to be addressed, especially the mobility modeling and routing-plan decision problems. Turkes et al. [7] propose a middleware named Cocoon for a mobile opportunistic network. They design a routing protocol on Wi-Fi and Bluetooth connections and and show that their proposed protocol performs well in terms of dissemination rate, delivery latency and energy consumption. Giordano et al. [8] consider mobile clouds supported by opportunistic computing, where a mobile device can combine and exploit heterogeneous resources from other devices. Pu et al. [9] present a QoS-oriented self-organized mobile crowdsourcing framework where prevalent opportunis- tic user encounters in our daily life are utilized to solve a crowdsourcing problem. Zhan el al. [10] propose a incentive- aware and time-sensitive framework for mobile crowdsensing. they formulate the problem of interaction between data carrier and relay users into a two-player game, and utilize an asym- metric Nash bargain strategy to generate optimal schedule.

Mobile service composition technique allows users to issue composite services with the help of fine-grained services over mobile networks mobile networks. Recent technological ad- vances made in the hardware and software of mobile devices, especially wireless networking, materialize a vision where devices all around a user, either carried by nearby users, or embedded as a part of smart spaces, are enabled to present ser- vices probably useful. Users sometimes demand novel services which are not pre-existent on any devices. Otherwise, they dynamically build new services by appropriately combining already existing ones. Extensive studies are carried out in this direction. For example, Deng et al. [11] classify mobile service composition methods into three categories: Cloud to Mobile (C2M), Mobile to Mobile (M2M) and Hybrid. They also discuss related challenges, e.g., performance guarantee, energy efficiency, and security. Later, Deng et al. [12] propose a mobile-service-sharing-community model and extend the random way point (RWP) model to model user mobility. They utilize a meta-heuristic algorithm to decide the optimal com- positional plan. They consider services shared in a community are fully available all the time. Sadiq et al. [13] use a Levy walk model and SLAW model to generate user traces, where each node is equally likely to meet any other one and inter- decive connectivity is implemented using multi-hop paths. Christin Groba et al. [14] present a schedule protocol for service composition. Their protocol allocates service providers opportunistically to service consumers to minimize the impact of change on topology. However, their protocol only support a sequences and parallel service flows. Yang et al. [15] propose a QoS model for mobile service selection. They consider not only mobile wireless network characteristics but also user- perceived factors. However, their algorithm considers single service selection rather than multiple service selection for composite service processes. Zhang et al. [16] consider a bio-inspired and context-aware mobile service selection al- gorithm. They introduce a tree-encoding method to improve the capacity and efficiency of genetic operations of a genetic algorithm. However, for simplicity, they do not consider user mobility. Wang et al. [17] employ a probability-free model and a probabilistic model to characterize the uncertainty during service invoking. They assume that services are able to tolerate a certain level of the mobility of service providers. However, for simplicity, they consider the sequential pattern of service compositions only.
It can be seen that, existing studies are limited in several ways: 1) for simplicity, most of them consider fully-available services in their QoS determination models and scheduling algorithms. However, real-world mobile services are usually of unreliable and time-varying availability, as suggested by our test data given later. 2) Various studies consider RWP and Levy models where mobile devices are assumed to follow random walks and Brownian motion patterns. However, recent several studies, e.g., [18]â€“[20], show that individual trajectories are far from random, possessing a high degree of regularity and predictability. Different mobility model must be applied to different application environment [21], e.g., mobility pattern of office is different from that of subway. Thus, using a general model to describe such different mobility patterns is unrealistic. 3) Some, e.g., [17], [22] use a probabilistic model to characterize the uncertainty of composite services and consider that unavailability of composing concrete services leads to failure of service compositions. They assume the probability that a provider stays within the required distance to its corresponding service requester follows a certain type of given distribution. However, such distribution in real-world is usually unpredictable due to the uncertain spatial layout of mobile devices and the human traffic pattern (e.g., people flow in a fixed office cubicle is totally different from that of a crowded shopping mall).
The above limitations could be well avoided by using a reliability-aware and deadline-constrained service composi- tion mechanism and a Krill-Herd-based algorithm to decide composition schedules, where the reliability of a composition schedule which can be obtained by aggregating availability of its tasks is adopted as an optimization objective to improve success rate of mobile service composition.
Mobile service composition over an opportunistic network has three distinctive properties:
1) Locality: In a mobile opportunistic network, mobile users are allowed to perceive nearby services and establish self- organized local communications within permitted transmission distance. Thus, locality of services can well be exploited and utilized.
2) Mobility: Service requesters and providers keep moving in the mobile network even when they are requesting or provisioning mobile services.
3) Dynamicity: The availability of mobile services is time- varying because it is decided by the relative distance between service providers and consumers and such distance is chang- ing.
Fig. 2 illustrates how mobile service discovery and provision function over an opportunistic network: a mobile service requester perceives mobile services exposed by nearby devices through D2D links and launches a service composition request. A composer process can be implemented and deployed on mo- bile devices, and it allow mobile devices to discover available mobile services nearby, select appropriate concrete services, and compose selected services into a service composition. All concrete services interact with the composer directly.
Note that, we consider one-hop D2D links for both service requesters and providers since multi-hop D2D communications generally incur unacceptable network overhead [23]. Some existing researches, e.g., [24]â€“[28], as well, show that a mobile user usually finds sufficient one-hop neighbors to support its applications and thus multi-hop ones are rarely considered.
We use a simple example to explain how services are composed over opportunistic networks. Consider Tom situated in a crowded subway whose mobile phone has low battery. He now wants to edit some videos, add some visual effects, and share these video clips to his friends. Because of low battery of his mobile phone, he gives up local editing and uploads original videos to a cloud and uses cloud services to carry out editing jobs. However, uploading tasks into a cloud requires heavy cellular traffic, which requires much energy consumption and expensive communication overhead. Luckily, several video processing services available on nearby mobile devices. Tom thus decides to choose from and compose and invoke such mobile services to get jobs done through D2D communications. Since both the user and candidate services are of high mobility, the composition plan can thus be dynamically decided based on the availability of services. It is clear to see that traditional service composition strategies based on a static model formulation are insufficient and a novel composition strategy considering dynamic availability is required.
The availability of mobile services is varying with time and dynamically decided by user mobility. As illustrated by an example in Fig. 3, mobile users i and j are with in transmission rage R, which is a preset value (e.g., usually 10m for bluetooth and 25m for Wi-Fi). i is a mobile service requester while user j a mobile service provider. Each user moves freely and it is assumed that their moving area is a circle with a radius r (note that this assumption is widely used in related work, e.g., [12], [15], [29]). d is the distance between i and j, and it can be deduced from RSSI (Received Signal Strength Indicator) easily [30]. If j moves out of the transmission range of i, then j is unreachable for i and consequently the services of j become unavailable to i. Consider that a mobile user i issues a composite service which contains task t. A mobile service s shared by user j is a one of the candidate service for task t, and its service availability, A(s) can be calculated as the probability that j keeps staying inside the transmission range:
where Si   j is the moving area of j within the transmission range of user i, Sj the moving area of j. A(s) serves as an input into a reliability-aware composition model and scheduling algorithm to be proposed later.
The radius of user moving area r is decided by the product  Ì„
of its moving speed v and the average service time t. The speed of a mobile user v can be measured and obtained through GPS data or mobile sensors (e.g., Gyro-sensor). Then the moving radius can be calculated as the product of t Ì„and v. The average service time t Ì„ can be statistically calculated form the recent n trials.
Therefore, Si   j can be calculated as follows:
where Î± and Î² are half of service provider/consumer central angle respectively as shown in Fig. 3, and they can be calculated as follows:
Finally, Sj can be obtained as:
The availability of mobile service s between requester i and
provider j can thus be estimated as:
A mobile service composition can be described by a two- tuple SC = (T,E) , where T = {t1,t2,...,tm} is a set of tasks and E is a set of directed edges. An edge ei,j of the form (ti,tj) indicates that a data dependency between ti and tj exists and ti/tj are the parent/child tasks respectively. A child task is executed only after all its parent tasks are completed. Furthermore, if there is data transmission attached onto ei,j, tj can start only after the data from ti is received. A dummy tentry/texit task with zero execution time can be added as a sole entry/exit task if the original composition process has multiple entry/exit tasks rather than a single one. D denotes the user-recommended constraint of the completion time of the service composition. Note that this constraint can be either hard or soft one. In this work we consider hard constraint where the actual service composition completion time is bounded by D. A sample composite mobile service for arranging a travel plan [31] is illustrated in Fig. 4. We denote the composition patterns (i.e., sequence, choice, parallel and loop) by symbols â†’, C , P and L , respectively.
As shown in Fig. 5, a mobile user can perceive services exposed by other users and these available services can be
(i) (j) (k) (k) described as service pool P = {s1 , s2 , ..., sm }, sm means
there are k candidate services for task tm. Once a user issues a service composition request, tasks in the composite service are scheduled to the service selected from services pool and executed.
If task ti connects tk through edge ei,k and they are executed by different service providers, the transfer time, Di,k, is inevitable because inter-provider data and control signal transfer is required. Otherwise, Di,k = 0.
As mentioned earlier, a key issue of service composition over opportunistic networks is its promised performance, in terms of deadline of composite service execution, which is decided by the composition schedule carried out at run-time. It should be noted that schedules with high performance but low reliability guarantee should be avoided. The resulting problem can therefore be formulated as:
where R is the reliability of a service composition schedule, and can be obtained by aggregating all services availability thorough a reduction method presented in our earlier work [32]. Ï„ is the estimated time of a service composition.
The derivation of Ï„ requires some efforts. Ï„ can be cal- culated as the estimated end time of the last task texit in a service composition template:
where dexit denotes the estimated end time of task texit. We use di to denote the estimated end time of task ti, it can be iteratively calculated as:
where bi denotes the estimated start time of executing ti and ei the execution time of ti itself.
bi is decided by the estimated end time of its immediately preceding tasks and the time required for data transfer. Let Î³i denote the estimated time when all earlier tasks scheduled to the same provider to ti are finished, we have:
where âˆ—ti denotes the immediately preceding tasks of ti , i.e., those which directly connect ti through edges in the template. w(ti) is the function to identify the provider into which ti is scheduled. w(ti) = w(tj) indicates that ti and tj are scheduled into the same provider.
Note that the dependency constraint requires that a task be executed only if its immediately preceding ones successfully terminate and transfer data. We use yi to denote the estimated earliest time when the described condition holds for ti.
The earliest possible time to execute bi, can therefore be calculated as:
The first task of a service composition has no preceding task
and therefore its estimated ending time is obtained as:
where b1 can be obtained as:
where Î´ is the time between issuing a service composition and generating a corresponding schedule.
The optimization problem proposed in the previous section can be reduced to a knapsack problem. It is widely known that the latter is NP-hard [33]. Hence the proposed problem is also NP-hard. It is therefore extremely time-consuming to yield optimal service composition schedules through traversal- based algorithms. Fortunately, heuristic and meta-heuristic algorithms with polynomial complexity are able to produce approximate or near optimal solutions.
Krill-Herd algorithm [34], called KH for short, is a light- wight meta-heuristic generic stochastic optimization algorithm for global optimization problems. Inspired by predatory behav- iors, communication behaviors and random diffusion behaviors of krills. These behaviors are in parallel and thus resulting algorithms can be parallel executed for high efficiency. These distinctive features make KH algorithms high suitable for solving the problem described in this paper.
Based on our problem descriptions introduced earlier, we present definitions of motion and crossover operations of KH next and show how resulting composition schedules are generated.
A service composition schedule is encoded as a krill in- dividual, and the individual with the best position stands for the so-far-obtained best schedule in terms of its corresponding estimated reliability of a composite service. The target of KH is to find an individual with the best position which corresponds to a composition schedule with highest estimated reliability. Therefore, once the optimal individual is found, the best mobile service composition is obtained.
The position vector of each individual can be represented
by an integer array, whose length equal to the number of tasks
in a service composition request. The i-th entry of the array,
in turn, refers to the concrete service selected by task ti . In
other words, given that the value of the n-th entry is k, s (n,k)
is the selected concrete service to execute tn. Fig. 6 illustrates a simple example of krill encoding.
A motion operator is a key component of KH. The change in position of each krill individual has three primary contributors: 1) motion influenced by other krills; 2) foraging motion; 3) random physical diffusion. Therefore, the Lagrangian model of KHâ€™s motion operator can be described as follow:
where individual Xi = {s(1,j), s(2,k), ..., s(m,l)} represents the i-th composition schedule in population, m is the number of tasks, Ni denotes the motion influenced by other krills, Fi denotes the foraging motions and Di denotes the random physical diffusion.
1) Movement influenced by other krills
The motion influenced by other individuals refers to learn- ing from neighboring individuals with different composition schedules.
where
estimated by target swarm density (denotes as Î±target) and local swarm density (denotes as Î±local), Nmax the maximum influenced speed, Ï‰n âˆˆ [0,1] the inertia weight of the influenced motion, and Nold the last influenced motion.
2) Foraging Motion
i
Similarly, the movement caused by foraging Fi refers to learning from the highest estimated process reliability so far. It has two parts: 1) the information about current food location and previous food location. 2) The foraging motion of individual Xi. It can thus be obtained as follow:
where
where Vf is the foraging speed, Ï‰f âˆˆ [0, 1] the inertia weight
of foraging motion, and F old the last foraging motion, and Î²i i
the direction of the foraging motion. 3) Random physical diffusion
The physical diffusion of individual Xi can be considered as a random process. It includes two components: a random direction vector and a maximum physical diffusion speed.
where Dmax is the maximum physical diffusion speed, Î¸ âˆˆ
[âˆ’1, 1] the random directional vector.
Crossover operators aim at enhancing the search capability. Inspired by SGA (Stud Genetic algorithm) [35] that employs the optimal genome for crossover at each generation, we introduce a stud selection procedure to further improve KHâ€™s search capability.
The crossover operator for our proposed problem is de- signed to be controlled by a dynamic crossover rate Cr:
where r is a preset parameter to control crossover rate baseline, Ri the i-th individualâ€™s reliability, Rh the current highest reliability value, and Rl lowest reliability value obtained so far.
Then a crossover vector Cv = {c1, c2, ..., cn} can be generated by Cr:
As shown in Algorithm 1, we can see that for each individ- ual Xi to crossover, we choose the optimal individual Stud (i.e., the individual with the highest reliability value) to mate. As shown in Fig. 7, the characteristics from individual Stud are copied to individual Xi according to crossover vector Cv.
The offspring generated by crossover operations should be evaluated and updated to the current evolutionary sequence. According to the three motion actions proposed earlier, the time-dependent position from time t and âˆ†t can be formulated by the following equation:
where
where CT is a constant to scale the search space, Uj the upper bound of candidate services for the j-th task and Lj the lower bound.
The search space of solutions usually grows exponentially with the scale of a composite service. To accelerate the search speed and convergence of the KH algorithm, the initial population are defined and generated in a way that each individual of the population complies with the structural constraint of the service composition, and its position vector are generated by randomly choosing concrete services from the resource pool. The pseudocode of generating an individual is given in Algorithm 1. This procedure starts with constructing a resource pool through summarizing services exposed by available service providers. Then we choose concrete service randomly from the resource pool for each individual.
The fitness of an individual solution is decided by its estimated reliability on condition that the deadline constraint is met.
The selection strategy is therefore based on the fitness esti- mation and implemented through a tournament-based method [36]. To be specific, we employ a constraint-handling strategy described below to select individuals for new generations: 1) if the Ï„ values of two solutions are feasible, then the one with lower reliability is discarded, 2) if the Ï„ value of only one solution is feasible, then the infeasible one is simply discarded; and 3) if the Ï„ values of both solutions are infeasible, then the one with lower estimated reliability is discarded. Based on the above discussions, the KH-based composition algorithm is given in Algorithm 3.
The overall computational complexity of our proposed framework can be analyzed by examining its initialization, fit- ness evaluation, motion, crossover and update operations. Sup- pose there are k available service providers within transmis- sion range, the time complexity of resource pool initialization is O(m Ã— k). The time complexity of initializing an individual is O(m), thus population initialization requires O(m Ã— y) where y is the size of initial population. Therefore, the time complexity of initialization operation is O(mk + my). The fitness evaluation for each individual has the time complexity of O(m2) and thus fitness evaluation for initial population of size y with Ï‰ generations has the time complexity of O(yÏ‰m2). The time complexity for motion, crossover, and update operations are O(y), O(m), and O(1), respectively. Consequently, the total time complexity of motion, crossover, update with Ï‰ generations is O(Ï‰y) + O(Ï‰m) + O(Ï‰). Finally, the total time complexity of initialization, fitness evaluation, motion, crossover and update is thus O(mk + my) + O(yÏ‰m2) + O(Ï‰y) + O(Ï‰m) + O(Ï‰) = O(yÏ‰m2)
In this section, we present a case study based on some well-known service composition templates and a real-world dataset of measured completion time of D2D contact traces. We apply and compare traditional scheduling approaches and our proposed to schedule such service composition templates.
The case study is based on a personal computer with an Intel Core i5, 2.4GHz CPU, 4GB RAM, macOS Sierra and Matlab R2015b Edition.
We consider MIT Reality dataset [37] as D2D contact traces of mobile users in an opportunistic network, where user location, application usage, Bluetooth devices in proximity, and hardware status (i.e., charging or idle) are collected from 100 mobile users within several months. This dataset can well depicts mobility, time-varying connectivity, and changing reliability of mobile devices and services. We use data from the QWS dataset [38] as the QoS of candidate mobile services. QWS consists of QoS data (response time and throughput) of 4500 real-world Web services observed by 142 users measured every 15 minutes.
Table I shows a part of opportunistic contact traces of a mobile user in the MIT Reality dataset. It can be seen that there are 5 nearby devices within D2D transmission distance at time T1 and thus they are potential service providers. Table II shows an example of service providers and the services they expose to nearby devices. Table III shows the Cartesian product of two tables, which identifies the sets of available candidate services at different times, s1@p2 indicates candidate service s1 provided by p2. As shown in Table III, five kinds of services s1 /s4 /s5 /s6 /s7 are available at T1 and they have 3/3/2/2/1 candidate services, respectively. This table clearly shows that mobile services are with a time-varying set of supporting mobile services. A smart algorithm able to exploit the time- varying availability of mobile services is thus needed. The run-time contact time of a mobile service is decided by its corresponding record in the MIT reality dataset. Consider that a composition schedule is applied at T1 and its estimated completion time is T3, then the corresponding contact data, which suggests availability status of candidate services, is used to decide whether an unsuccessful composition occurs as caused by the unavailability of required services between T1 and T3.
For the comparison purpose, we also apply a representative algorithm proposed in [12] [13], which consider time-invariant availability, to schedule four composition templates given in Fig. 8. Note that we consider these two as the baseline algo- rithms because: 1) their physical model formulation is identical to ours; 2) their test results suggest that they outperform all other earlier methods; and 3) their proposed algorithms are different in details but actually equally effective.
The four composition templates include three well-known templates and a random generated template. The three well- known templates represent composite services and business processes for travel-arranging, TensorFlow-based data pro- cessing, and astronomical image processing applications. As usually done in various existing studies [39], [40], data trans- mission time can be calculated as the throughput (20Mbps as suggested by the MIT Reality dataset) divided by the average bandwidth. The test is based on 50-people opportunistic con- tract data from the MIT Reality dataset. The test includes 50 results of scheduling service compositions with our algorithms and its peers in consecutive periods of 5 minutes.
As shown in Fig. 9(a), Fig. 10(a), Fig. 11(a) and Fig. 12(a), our proposed method achieves higher success rate (99.9% vs. 97.3% for Case I in average, 92.1% vs. 75.7% for Case II in average, and 89% vs. 54.9% for Case III in average, and 91.8% vs. 75.6% for Case IV in average) compared with its peers. Fig. 9(b), Fig. 10(b), Fig. 11(b) and Fig. 12(b) shows the comparisons of process completion time where our proposed algorithm achieves 2.2%, 17.7%, 38.2%, and 18.8% time savings in each case over its peer. Intuitively, our algorithm outperforms traditional ones because traditional ones consider fully available mobile services and therefore ignore the reliability of a composite service, thus they tend to choose services with low response time. As a result, the service composition constructed by these low response time services might have a poor reliability and would eventually lead to a failure.
This paper presents a comprehensive framework for opti- mal mobile service composition in a mobile environment. It fully leverages service mobility with a reliability-aware and deadline-constrained mobile service composition model. Then we formulate the developed model as an optimization problem aiming at maximizing the quality of composite service and propose a Krill-Herd-based algorithm to solve it. We also carry out a case study based on a real-world opportunistic network and some well-known mobile service composition templates and shows that our proposed approach outper- forms traditional approaches, especially those who consider constant/time-invariant availability of mobile services, in terms of success rate and completion time.
The following issues should be addressed as future work: 1) Some prediction methods, e.g., time-series model, hidden Markov models and neural networks can be used to predict a userâ€™s future movement and to achieve further improved performance of composite services; 2) more metrics, e.g., service scalability and service reputation should be modeled and analyzed; 3) soft constraints should be considered. They allow to exceed a threshold value with a bounded given rate, while the corresponding algorithms for optimal run-time scheduling should be developed.















